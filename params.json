{"name":"Copacabana","tagline":"Quick prototyping node+redis+socket.io API server for javascript applications","body":"# Copacabana\r\n\r\nQuick prototyping node+redis+socket API server for javascript applications\r\n\r\n## Version\r\n\r\n0.0.1\r\n\r\n## Licence\r\n\r\nMIT Licenced\r\n\r\n## Install\r\n\r\nInstall vendors\r\n  ```\r\n  npm install restify\r\n  npm install socket.io\r\n  npm install redis\r\n  ```\r\n\r\nCopy and edit config file  \r\n  `cp conf/configuration.js.dist conf/configuration.js`\r\n\r\nMake sure Redis is running\r\n\r\nThen run Copacabana  \r\n  `node copacabana.js`\r\n\r\n## General usage\r\n\r\nCopacabana allows you to manage you backend API + push events for your frontend\r\njavascript apps. It is not designed to be used in production, rather to\r\nprototype fast javascript applications.\r\n\r\n## Example\r\n\r\nSee [here](http://guillaumepotier.github.io/copacabana/example/copacabana-todo-mvc/)\r\na live demo of famous Todo MVC Backbone running with copacabana.\r\n\r\nSource code could be found in `example/`\r\n\r\n### API\r\n\r\nCopacabana implements these urls:\r\n\r\n- `GET /:namespace/:collection`\r\n- `POST /:namespace/:collection` + push event\r\n- `GET /:namespace/:collection/:id`\r\n- `PUT /:namespace/:collection/:id` + push event\r\n- `DELETE /:namespace/:collection/:id` + push event\r\n\r\n### Socket events\r\n\r\nEvents sent are formatted that way:\r\n\r\n`POST /:namespace/:collection`: `{ method: 'POST', collection: collection, data: object}`\r\nsent in `namespace` socket room","google":"UA-42282896-1","note":"Don't delete this file! It's used internally to help with page regeneration."}